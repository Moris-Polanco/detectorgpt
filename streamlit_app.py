import streamlit as st
import openai
import os

# Autenticaci√≥n de OpenAI (oculta la clave en una variable de entorno)
openai.api_key = os.environ.get("OPENAI_API_KEY")

def detect_gpt3(prompt):
    generated_text = openai.Completion.create(
        engine="text-davinci-002",
        prompt=prompt,
        max_tokens=2048,
        n=1,
        stop=None,
        temperature=0.5,
    ).choices[0].text

    prompt_prob = openai.LanguageModel.create(
        engine="text-davinci-002",
        prompt=prompt
    ).get_probability(prompt)

    generated_text_prob = openai.LanguageModel.create(
        engine="text-davinci-002",
        prompt=generated_text
    ).get_probability(generated_text)

    return prompt_prob, generated_text_prob

st.title("GPT-3 Text Detection App")

text = st.text_area("Enter text to check if generated by GPT-3:")

if st.button("Check"):
    prompt_prob, generated_text_prob = detect_gpt3(text)
    if abs(prompt_prob - generated_text_prob) < 0.05:
        st.success("The text is generated by GPT-3")
    else:
        st.error("The text is not generated by GPT-3")

def detect_gpt3(prompt):
    completions = openai.Completion.create(
        engine="text-davinci-003",
        prompt=prompt,
        max_tokens=2048,
        n=10,
        stop=None,
        temperature=0.5,
    )

    generated_texts = [choice.text for choice in completions.choices]
    similarity_scores = []
    for generated_text in generated_texts:
        similarity_scores.append(1-distance(prompt,generated_text)/max(len(prompt),len(generated_text)))
    return max(similarity_scores)

st.title("GPT-3 Text Detection App")

text = st.text_area("Enter text to check if generated by GPT-3:")

if st.button("Check"):
    threshold = 0.8
    result = detect_gpt3(text)
    if result > threshold:
        st.success("The text is generated by GPT-3")
    else:
        st.error("The text is not generated by GPT-3")
