import streamlit as st
from nltk import jaccard_distance
import openai
import streamlit as st
import os

# AutenticaciÃ³n de OpenAI (oculta la clave en una variable de entorno)
openai.api_key = os.environ.get("OPENAI_API_KEY")

Sure, here's an example of how you can use the Jaccard similarity to compare the similarity between the original text and the generated text:

Copy code
import streamlit as st
import openai_secret_manager
from nltk import jaccard_distance

# Get API key for GPT-3
secrets = openai_secret_manager.get_secrets("openai")
api_key = secrets["api_key"]

# Import the OpenAI library
import openai

# Set API key
openai.api_key = api_key

def detect_gpt3(prompt):
    completions = openai.Completion.create(
        engine="text-davinci-002",
        prompt=prompt,
        max_tokens=2048,
        n=10,
        stop=None,
        temperature=0.5,
    )

    generated_texts = [choice.text for choice in completions.choices]
    similarity_scores = []
    for generated_text in generated_texts:
        similarity_scores.append(1-jaccard_distance(set(prompt.split()), set(generated_text.split())))
    return max(similarity_scores)

st.title("GPT-3 Text Detection App")

text = st.text_area("Enter text to check if generated by GPT-3:")

if st.button("Check"):
    threshold = 0.8
    result = detect_gpt3(text)
    if result > threshold:
        st.success("The text is generated by GPT-3")
    else:
        st.error("The text is not generated by GPT-3")
